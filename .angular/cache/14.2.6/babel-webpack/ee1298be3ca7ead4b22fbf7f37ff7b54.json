{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-experimental.js\n *\n * Copyright 2014, 2022 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable, NgModule, SkipSelf, Optional } from '@angular/core';\nimport * as ɵngcc0 from '@angular/core';\n\nclass ExperimentalService {\n  constructor() {\n    /**\n     * Map to hold all our experiments\n     */\n    this.experiments = new Map();\n  }\n  /**\n   * Adds an experiment if it doesn't exist.\n   */\n\n\n  addExperiment(name, options = {\n    enabled: false\n  }) {\n    if (!this.experiments.has(name)) {\n      this.experiments.set(name, options);\n    }\n  }\n  /**\n   * Enables an experiment by name\n   * @param name name of the experiment to enable\n   */\n\n\n  enableExperiment(name) {\n    const experiment = this.getExperiment(name);\n    experiment.enabled = true;\n  }\n  /**\n   * Disables an experiment by name\n   * @param name name of the experiment to disable\n   */\n\n\n  disableExperiment(name) {\n    const experiment = this.getExperiment(name);\n    experiment.enabled = false;\n  }\n  /**\n   * Get the options for an experiment by name\n   * @param name name of experiment to get\n   */\n\n\n  getExperiment(name) {\n    if (!this.experiments.has(name)) {\n      this.addExperiment(name);\n      return this.getExperiment(name);\n    }\n\n    return this.experiments.get(name);\n  }\n  /**\n   * Get an array of tuples representing an experiment and it's options\n   */\n\n\n  getExperiments() {\n    return Array.from(this.experiments.entries());\n  }\n\n}\n\nExperimentalService.ɵfac = function ExperimentalService_Factory(t) {\n  return new (t || ExperimentalService)();\n};\n\nExperimentalService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ExperimentalService,\n  factory: ExperimentalService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExperimentalService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})(); // either provides a new instance of ExperimentalService, or returns the parent\n\n\nfunction EXPERIMENTAL_SERVICE_PROVIDER_FACTORY(parentService) {\n  return parentService || new ExperimentalService();\n}\n\nconst EXPERIMENTAL_SERVICE_PROVIDER = {\n  provide: ExperimentalService,\n  deps: [[new Optional(), new SkipSelf(), ExperimentalService]],\n  useFactory: EXPERIMENTAL_SERVICE_PROVIDER_FACTORY\n};\n\nclass ExperimentalModule {}\n\nExperimentalModule.ɵfac = function ExperimentalModule_Factory(t) {\n  return new (t || ExperimentalModule)();\n};\n\nExperimentalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ExperimentalModule\n});\nExperimentalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [ExperimentalService, EXPERIMENTAL_SERVICE_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExperimentalModule, [{\n    type: NgModule,\n    args: [{\n      providers: [ExperimentalService, EXPERIMENTAL_SERVICE_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { EXPERIMENTAL_SERVICE_PROVIDER_FACTORY, EXPERIMENTAL_SERVICE_PROVIDER, ExperimentalModule, ExperimentalService };","map":{"version":3,"names":["Injectable","NgModule","SkipSelf","Optional","ɵngcc0","ExperimentalService","constructor","experiments","Map","addExperiment","name","options","enabled","has","set","enableExperiment","experiment","getExperiment","disableExperiment","get","getExperiments","Array","from","entries","ɵfac","ExperimentalService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","EXPERIMENTAL_SERVICE_PROVIDER_FACTORY","parentService","EXPERIMENTAL_SERVICE_PROVIDER","provide","deps","useFactory","ExperimentalModule","ExperimentalModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","args"],"sources":["/Users/TSC/Desktop/Angular-Carbon/carbon-tutorial-angular/node_modules/carbon-components-angular/__ivy_ngcc__/fesm2015/carbon-components-angular-experimental.js"],"sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-experimental.js\n *\n * Copyright 2014, 2022 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Injectable, NgModule, SkipSelf, Optional } from '@angular/core';\n\nimport * as ɵngcc0 from '@angular/core';\nclass ExperimentalService {\n    constructor() {\n        /**\n         * Map to hold all our experiments\n         */\n        this.experiments = new Map();\n    }\n    /**\n     * Adds an experiment if it doesn't exist.\n     */\n    addExperiment(name, options = { enabled: false }) {\n        if (!this.experiments.has(name)) {\n            this.experiments.set(name, options);\n        }\n    }\n    /**\n     * Enables an experiment by name\n     * @param name name of the experiment to enable\n     */\n    enableExperiment(name) {\n        const experiment = this.getExperiment(name);\n        experiment.enabled = true;\n    }\n    /**\n     * Disables an experiment by name\n     * @param name name of the experiment to disable\n     */\n    disableExperiment(name) {\n        const experiment = this.getExperiment(name);\n        experiment.enabled = false;\n    }\n    /**\n     * Get the options for an experiment by name\n     * @param name name of experiment to get\n     */\n    getExperiment(name) {\n        if (!this.experiments.has(name)) {\n            this.addExperiment(name);\n            return this.getExperiment(name);\n        }\n        return this.experiments.get(name);\n    }\n    /**\n     * Get an array of tuples representing an experiment and it's options\n     */\n    getExperiments() {\n        return Array.from(this.experiments.entries());\n    }\n}\nExperimentalService.ɵfac = function ExperimentalService_Factory(t) { return new (t || ExperimentalService)(); };\nExperimentalService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ExperimentalService, factory: ExperimentalService.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExperimentalService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n// either provides a new instance of ExperimentalService, or returns the parent\nfunction EXPERIMENTAL_SERVICE_PROVIDER_FACTORY(parentService) {\n    return parentService || new ExperimentalService();\n}\nconst EXPERIMENTAL_SERVICE_PROVIDER = {\n    provide: ExperimentalService,\n    deps: [[new Optional(), new SkipSelf(), ExperimentalService]],\n    useFactory: EXPERIMENTAL_SERVICE_PROVIDER_FACTORY\n};\nclass ExperimentalModule {\n}\nExperimentalModule.ɵfac = function ExperimentalModule_Factory(t) { return new (t || ExperimentalModule)(); };\nExperimentalModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ExperimentalModule });\nExperimentalModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        ExperimentalService,\n        EXPERIMENTAL_SERVICE_PROVIDER\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExperimentalModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    ExperimentalService,\n                    EXPERIMENTAL_SERVICE_PROVIDER\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPERIMENTAL_SERVICE_PROVIDER_FACTORY, EXPERIMENTAL_SERVICE_PROVIDER, ExperimentalModule, ExperimentalService };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}