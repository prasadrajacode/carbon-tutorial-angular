{"ast":null,"code":"/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-checkbox.js\n *\n * Copyright 2014, 2022 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * Defines the set of states for a checkbox component.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"inputCheckbox\"];\n\nconst _c1 = function (a0) {\n  return {\n    \"bx--skeleton\": a0\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    \"bx--visually-hidden\": a0\n  };\n};\n\nconst _c3 = [\"*\"];\nvar CheckboxState;\n\n(function (CheckboxState) {\n  CheckboxState[CheckboxState[\"Init\"] = 0] = \"Init\";\n  CheckboxState[CheckboxState[\"Indeterminate\"] = 1] = \"Indeterminate\";\n  CheckboxState[CheckboxState[\"Checked\"] = 2] = \"Checked\";\n  CheckboxState[CheckboxState[\"Unchecked\"] = 3] = \"Unchecked\";\n})(CheckboxState || (CheckboxState = {}));\n/**\n * Used to emit changes performed on checkbox components.\n *\n * @deprecated since v4\n */\n\n\nclass CheckboxChange {}\n/**\n * [See demo](../../?path=/story/components-checkbox--basic)\n *\n * <example-url>../../iframe.html?id=components-checkbox--basic</example-url>\n */\n\n\nclass Checkbox {\n  /**\n   * Creates an instance of `Checkbox`.\n   */\n  constructor(changeDetectorRef) {\n    this.changeDetectorRef = changeDetectorRef;\n    /**\n     * Size of the checkbox.\n     *\n     * @deprecated since v4\n     */\n\n    this.size = \"md\";\n    /**\n     * Set to `true` for checkbox to be rendered without any classes on the host element.\n     */\n\n    this.inline = false;\n    /**\n     * Set to `true` for a disabled checkbox.\n     */\n\n    this.disabled = false;\n    /**\n     * Set to `true` for a loading checkbox.\n     */\n\n    this.skeleton = false;\n    /**\n     * Set to `true` to hide the checkbox labels.\n     */\n\n    this.hideLabel = false;\n    /**\n     * The unique id for the checkbox component.\n     */\n\n    this.id = `checkbox-${Checkbox.checkboxCount}`; // TODO: drop the `_`\n    // tslint:disable-next-line:no-input-rename\n\n    this._ariaLabel = \"\";\n    /**\n     * Emits click event.\n     */\n\n    this.click = new EventEmitter();\n    /**\n     * Emits event notifying other classes when a change in state occurs on a checkbox after a\n     * click.\n     *\n     * @deprecated since v4 use `checked` and `checkedChange` instead\n     */\n\n    this.change = new EventEmitter();\n    /**\n     * Emits an event when the value of the checkbox changes.\n     *\n     * Allows double biding with the `checked` Input.\n     */\n\n    this.checkedChange = new EventEmitter();\n    /**\n     * Emits event notifying other classes when a change in state occurs specifically\n     * on an indeterminate checkbox.\n     */\n\n    this.indeterminateChange = new EventEmitter();\n    /**\n     * Set to `true` if the input checkbox is selected (or checked).\n     */\n\n    this._checked = false;\n    /**\n     * Set to `true` if the input checkbox is in state indeterminate.\n     */\n\n    this._indeterminate = false;\n    /**\n     * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n     */\n\n    this.currentCheckboxState = CheckboxState.Init;\n    /**\n     * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n     */\n\n    this.onTouched = () => {};\n    /**\n     * Method set in `registerOnChange` to propagate changes back to the form.\n     */\n\n\n    this.propagateChange = _ => {};\n\n    Checkbox.checkboxCount++;\n  }\n  /**\n   * Used to set the `aria-label` attribute on the input element.\n   *\n   * @deprecated since v4 use the `ariaLabel` input instead\n   */\n  // tslint:disable-next-line:no-input-rename\n\n\n  set ariaLabel(value) {\n    this._ariaLabel = value;\n  }\n\n  get ariaLabel() {\n    return this._ariaLabel;\n  }\n  /**\n   * Used to set the `aria-labelledby` attribute on the input element.\n   *\n   * @deprecated since v4 use the `ariaLabelledby` input instead\n   */\n  // tslint:disable-next-line:no-input-rename\n\n\n  set ariaLabelledby(value) {\n    this._ariaLabelledby = value;\n  }\n\n  get ariaLabelledby() {\n    return this._ariaLabelledby;\n  }\n  /**\n   * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n   *\n   * Allows double binding with the `indeterminateChange` Output.\n   */\n\n\n  set indeterminate(indeterminate) {\n    if (indeterminate === this._indeterminate) {\n      return;\n    }\n\n    this._indeterminate = indeterminate;\n\n    if (this._indeterminate) {\n      this.transitionCheckboxState(CheckboxState.Indeterminate);\n    } else {\n      this.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n    }\n\n    if (this.inputCheckbox && this.inputCheckbox.nativeElement) {\n      this.inputCheckbox.nativeElement.indeterminate = indeterminate;\n    }\n\n    this.changeDetectorRef.markForCheck();\n    this.indeterminateChange.emit(this._indeterminate);\n  }\n  /**\n   * Reflects whether the checkbox state is indeterminate.\n   */\n\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n  /**\n   * Sets the `checked` state. `true` for checked, `false` for unchecked\n   *\n   * Allows double binding with the `checkedChange` Output.\n   */\n\n\n  set checked(checked) {\n    this.setChecked(checked, false);\n  }\n  /**\n   * Returns value `true` if state is selected for the checkbox.\n   */\n\n\n  get checked() {\n    return this._checked;\n  }\n  /**\n   * Toggle the selected state of the checkbox.\n   */\n\n\n  toggle() {\n    // Flip checked and reset indeterminate\n    this.setChecked(!this.checked, true);\n  }\n  /**\n   * Writes a value from `ngModel` to the component.\n   *\n   * In this case the value is the `checked` property.\n   *\n   * @param value boolean, corresponds to the `checked` property.\n   */\n\n\n  writeValue(value) {\n    // Set checked and reset indeterminate\n    this.setChecked(!!value, true);\n  }\n  /**\n   * Sets a method in order to propagate changes back to the form.\n   */\n\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  /**\n   * `ControlValueAccessor` method to programmatically disable the checkbox.\n   *\n   * ex: `this.formGroup.get(\"myCheckbox\").disable();`\n   *\n   * @param isDisabled `true` to disable the checkbox\n   */\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.inputCheckbox.nativeElement.disabled = this.disabled;\n  }\n\n  focusOut() {\n    this.onTouched();\n  }\n  /**\n   * Executes on the event of a change within `Checkbox` to block propagation.\n   */\n\n\n  onChange(event) {\n    event.stopPropagation();\n  }\n  /**\n   * Handles click events on the `Checkbox` and emits changes to other classes.\n   */\n\n\n  onClick(event) {\n    if (this.click.observers.length) {\n      // Disable default checkbox activation behavior which flips checked and resets indeterminate.\n      // This allows the parent component to control the checked/indeterminate properties.\n      event.preventDefault();\n      this.click.emit();\n      return;\n    }\n\n    if (!this.disabled) {\n      this.toggle();\n      this.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n      this.emitChangeEvent();\n    }\n  }\n  /**\n   * Handles changes between checkbox states.\n   */\n\n\n  transitionCheckboxState(newState) {\n    this.currentCheckboxState = newState;\n  }\n  /**\n   * Creates instance of `CheckboxChange` used to propagate the change event.\n   */\n\n\n  emitChangeEvent() {\n    /* begin deprecation */\n    let event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n    /* end deprecation */\n\n    this.checkedChange.emit(this.checked);\n    this.propagateChange(this.checked);\n  }\n  /**\n   * Updates the checkbox if it is in the indeterminate state.\n   */\n\n\n  ngAfterViewInit() {\n    if (this.indeterminate && this.inputCheckbox && this.inputCheckbox.nativeElement) {\n      this.inputCheckbox.nativeElement.indeterminate = true;\n    }\n  }\n  /**\n   * Sets checked state and optionally resets indeterminate state.\n   */\n\n\n  setChecked(checked, resetIndeterminate) {\n    if (checked === this._checked) {\n      return;\n    }\n\n    this._checked = checked; // Reset indeterminate if requested\n\n    if (resetIndeterminate && this._indeterminate) {\n      this._indeterminate = false;\n      Promise.resolve().then(() => {\n        this.indeterminateChange.emit(this._indeterminate);\n      });\n    }\n\n    this.changeDetectorRef.markForCheck();\n  }\n\n}\n\nCheckbox.ɵfac = function Checkbox_Factory(t) {\n  return new (t || Checkbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nCheckbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: Checkbox,\n  selectors: [[\"ibm-checkbox\"]],\n  viewQuery: function Checkbox_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputCheckbox = _t.first);\n    }\n  },\n  hostBindings: function Checkbox_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focusout\", function Checkbox_focusout_HostBindingHandler() {\n        return ctx.focusOut();\n      });\n    }\n  },\n  inputs: {\n    size: \"size\",\n    inline: \"inline\",\n    disabled: \"disabled\",\n    skeleton: \"skeleton\",\n    hideLabel: \"hideLabel\",\n    id: \"id\",\n    _ariaLabel: [\"ariaLabel\", \"_ariaLabel\"],\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    _ariaLabelledby: [\"ariaLabelledby\", \"_ariaLabelledby\"],\n    indeterminate: \"indeterminate\",\n    checked: \"checked\",\n    nested: \"nested\",\n    name: \"name\",\n    required: \"required\",\n    value: \"value\"\n  },\n  outputs: {\n    click: \"click\",\n    change: \"change\",\n    checkedChange: \"checkedChange\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Checkbox,\n    multi: true\n  }])],\n  ngContentSelectors: _c3,\n  decls: 6,\n  vars: 15,\n  consts: [[1, \"bx--form-item\", \"bx--checkbox-wrapper\"], [\"type\", \"checkbox\", 1, \"bx--checkbox\", 3, \"id\", \"value\", \"name\", \"required\", \"checked\", \"disabled\", \"change\", \"click\"], [\"inputCheckbox\", \"\"], [1, \"bx--checkbox-label\", 3, \"for\", \"ngClass\"], [1, \"bx--checkbox-label-text\", 3, \"ngClass\"]],\n  template: function Checkbox_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"input\", 1, 2);\n      ɵngcc0.ɵɵlistener(\"change\", function Checkbox_Template_input_change_1_listener($event) {\n        return ctx.onChange($event);\n      })(\"click\", function Checkbox_Template_input_click_1_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"label\", 3)(4, \"span\", 4);\n      ɵngcc0.ɵɵprojection(5);\n      ɵngcc0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"id\", ctx.id + \"_input\")(\"value\", ctx.value)(\"name\", ctx.name)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n      ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"for\", ctx.id + \"_input\")(\"ngClass\", ɵngcc0.ɵɵpureFunction1(11, _c1, ctx.skeleton));\n      ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(13, _c2, ctx.hideLabel));\n    }\n  },\n  dependencies: [ɵngcc1.NgClass],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/**\n * Variable used for creating unique ids for checkbox components.\n */\n\nCheckbox.checkboxCount = 0;\n/** @nocollapse */\n\nCheckbox.ctorParameters = () => [{\n  type: ChangeDetectorRef\n}];\n\nCheckbox.propDecorators = {\n  size: [{\n    type: Input\n  }],\n  nested: [{\n    type: Input\n  }],\n  inline: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  skeleton: [{\n    type: Input\n  }],\n  hideLabel: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: [\"aria-label\"]\n  }],\n  _ariaLabel: [{\n    type: Input,\n    args: [\"ariaLabel\"]\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: [\"aria-labelledby\"]\n  }],\n  _ariaLabelledby: [{\n    type: Input,\n    args: [\"ariaLabelledby\"]\n  }],\n  indeterminate: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  click: [{\n    type: Output\n  }],\n  change: [{\n    type: Output\n  }],\n  checkedChange: [{\n    type: Output\n  }],\n  indeterminateChange: [{\n    type: Output\n  }],\n  inputCheckbox: [{\n    type: ViewChild,\n    args: [\"inputCheckbox\", {\n      static: false\n    }]\n  }],\n  focusOut: [{\n    type: HostListener,\n    args: [\"focusout\"]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Checkbox, [{\n    type: Component,\n    args: [{\n      selector: \"ibm-checkbox\",\n      template: `\n\t\t<div class=\"bx--form-item bx--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"bx--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"bx--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'bx--visually-hidden' : hideLabel}\" class=\"bx--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t`,\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: Checkbox,\n        multi: true\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, {\n    size: [{\n      type: Input\n    }],\n    inline: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    skeleton: [{\n      type: Input\n    }],\n    hideLabel: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    _ariaLabel: [{\n      type: Input,\n      args: [\"ariaLabel\"]\n    }],\n    click: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    checkedChange: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: [\"aria-label\"]\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: [\"aria-labelledby\"]\n    }],\n    _ariaLabelledby: [{\n      type: Input,\n      args: [\"ariaLabelledby\"]\n    }],\n    indeterminate: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    focusOut: [{\n      type: HostListener,\n      args: [\"focusout\"]\n    }],\n    nested: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    inputCheckbox: [{\n      type: ViewChild,\n      args: [\"inputCheckbox\", {\n        static: false\n      }]\n    }]\n  });\n})(); // modules\n\n\nclass CheckboxModule {}\n\nCheckboxModule.ɵfac = function CheckboxModule_Factory(t) {\n  return new (t || CheckboxModule)();\n};\n\nCheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CheckboxModule\n});\nCheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule, FormsModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckboxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [Checkbox],\n      exports: [Checkbox],\n      imports: [CommonModule, FormsModule]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckboxModule, {\n    declarations: function () {\n      return [Checkbox];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [Checkbox];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Checkbox, CheckboxState, CheckboxChange, CheckboxModule };","map":{"version":3,"names":["ChangeDetectionStrategy","ChangeDetectorRef","Component","EventEmitter","Input","Output","ViewChild","HostListener","NgModule","NG_VALUE_ACCESSOR","FormsModule","CommonModule","ɵngcc0","ɵngcc1","_c0","_c1","a0","_c2","_c3","CheckboxState","CheckboxChange","Checkbox","constructor","changeDetectorRef","size","inline","disabled","skeleton","hideLabel","id","checkboxCount","_ariaLabel","click","change","checkedChange","indeterminateChange","_checked","_indeterminate","currentCheckboxState","Init","onTouched","propagateChange","_","ariaLabel","value","ariaLabelledby","_ariaLabelledby","indeterminate","transitionCheckboxState","Indeterminate","checked","Checked","Unchecked","inputCheckbox","nativeElement","markForCheck","emit","setChecked","toggle","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusOut","onChange","event","stopPropagation","onClick","observers","length","preventDefault","emitChangeEvent","newState","source","ngAfterViewInit","resetIndeterminate","Promise","resolve","then","ɵfac","Checkbox_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","Checkbox_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostBindings","Checkbox_HostBindings","ɵɵlistener","Checkbox_focusout_HostBindingHandler","inputs","nested","name","required","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","ngContentSelectors","decls","vars","consts","template","Checkbox_Template","ɵɵprojectionDef","ɵɵelementStart","Checkbox_Template_input_change_1_listener","$event","Checkbox_Template_input_click_1_listener","ɵɵelementEnd","ɵɵprojection","ɵɵadvance","ɵɵproperty","ɵɵattribute","ɵɵpureFunction1","dependencies","NgClass","encapsulation","changeDetection","ctorParameters","propDecorators","args","static","ngDevMode","ɵsetClassMetadata","selector","providers","OnPush","CheckboxModule","CheckboxModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["/Users/TSC/Desktop/Angular-Carbon/carbon-tutorial-angular/node_modules/carbon-components-angular/__ivy_ngcc__/fesm2015/carbon-components-angular-checkbox.js"],"sourcesContent":["/**\n *\n * carbon-angular v0.0.0 | carbon-components-angular-checkbox.js\n *\n * Copyright 2014, 2022 IBM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewChild, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Defines the set of states for a checkbox component.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"inputCheckbox\"];\nconst _c1 = function (a0) { return { \"bx--skeleton\": a0 }; };\nconst _c2 = function (a0) { return { \"bx--visually-hidden\": a0 }; };\nconst _c3 = [\"*\"];\nvar CheckboxState;\n(function (CheckboxState) {\n    CheckboxState[CheckboxState[\"Init\"] = 0] = \"Init\";\n    CheckboxState[CheckboxState[\"Indeterminate\"] = 1] = \"Indeterminate\";\n    CheckboxState[CheckboxState[\"Checked\"] = 2] = \"Checked\";\n    CheckboxState[CheckboxState[\"Unchecked\"] = 3] = \"Unchecked\";\n})(CheckboxState || (CheckboxState = {}));\n/**\n * Used to emit changes performed on checkbox components.\n *\n * @deprecated since v4\n */\nclass CheckboxChange {\n}\n/**\n * [See demo](../../?path=/story/components-checkbox--basic)\n *\n * <example-url>../../iframe.html?id=components-checkbox--basic</example-url>\n */\nclass Checkbox {\n    /**\n     * Creates an instance of `Checkbox`.\n     */\n    constructor(changeDetectorRef) {\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * Size of the checkbox.\n         *\n         * @deprecated since v4\n         */\n        this.size = \"md\";\n        /**\n         * Set to `true` for checkbox to be rendered without any classes on the host element.\n         */\n        this.inline = false;\n        /**\n         * Set to `true` for a disabled checkbox.\n         */\n        this.disabled = false;\n        /**\n         * Set to `true` for a loading checkbox.\n         */\n        this.skeleton = false;\n        /**\n         * Set to `true` to hide the checkbox labels.\n         */\n        this.hideLabel = false;\n        /**\n         * The unique id for the checkbox component.\n         */\n        this.id = `checkbox-${Checkbox.checkboxCount}`;\n        // TODO: drop the `_`\n        // tslint:disable-next-line:no-input-rename\n        this._ariaLabel = \"\";\n        /**\n         * Emits click event.\n         */\n        this.click = new EventEmitter();\n        /**\n         * Emits event notifying other classes when a change in state occurs on a checkbox after a\n         * click.\n         *\n         * @deprecated since v4 use `checked` and `checkedChange` instead\n         */\n        this.change = new EventEmitter();\n        /**\n         * Emits an event when the value of the checkbox changes.\n         *\n         * Allows double biding with the `checked` Input.\n         */\n        this.checkedChange = new EventEmitter();\n        /**\n         * Emits event notifying other classes when a change in state occurs specifically\n         * on an indeterminate checkbox.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Set to `true` if the input checkbox is selected (or checked).\n         */\n        this._checked = false;\n        /**\n         * Set to `true` if the input checkbox is in state indeterminate.\n         */\n        this._indeterminate = false;\n        /**\n         * Keeps a reference to the checkboxes current state, as defined in `CheckboxState`.\n         */\n        this.currentCheckboxState = CheckboxState.Init;\n        /**\n         * Called when checkbox is blurred. Needed to properly implement `ControlValueAccessor`.\n         */\n        this.onTouched = () => { };\n        /**\n         * Method set in `registerOnChange` to propagate changes back to the form.\n         */\n        this.propagateChange = (_) => { };\n        Checkbox.checkboxCount++;\n    }\n    /**\n     * Used to set the `aria-label` attribute on the input element.\n     *\n     * @deprecated since v4 use the `ariaLabel` input instead\n     */\n    // tslint:disable-next-line:no-input-rename\n    set ariaLabel(value) {\n        this._ariaLabel = value;\n    }\n    get ariaLabel() {\n        return this._ariaLabel;\n    }\n    /**\n     * Used to set the `aria-labelledby` attribute on the input element.\n     *\n     * @deprecated since v4 use the `ariaLabelledby` input instead\n     */\n    // tslint:disable-next-line:no-input-rename\n    set ariaLabelledby(value) {\n        this._ariaLabelledby = value;\n    }\n    get ariaLabelledby() {\n        return this._ariaLabelledby;\n    }\n    /**\n     * Set the checkbox's indeterminate state to match the parameter and transition the view to reflect the change.\n     *\n     * Allows double binding with the `indeterminateChange` Output.\n     */\n    set indeterminate(indeterminate) {\n        if (indeterminate === this._indeterminate) {\n            return;\n        }\n        this._indeterminate = indeterminate;\n        if (this._indeterminate) {\n            this.transitionCheckboxState(CheckboxState.Indeterminate);\n        }\n        else {\n            this.transitionCheckboxState(this.checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n        }\n        if (this.inputCheckbox && this.inputCheckbox.nativeElement) {\n            this.inputCheckbox.nativeElement.indeterminate = indeterminate;\n        }\n        this.changeDetectorRef.markForCheck();\n        this.indeterminateChange.emit(this._indeterminate);\n    }\n    /**\n     * Reflects whether the checkbox state is indeterminate.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    /**\n     * Sets the `checked` state. `true` for checked, `false` for unchecked\n     *\n     * Allows double binding with the `checkedChange` Output.\n     */\n    set checked(checked) {\n        this.setChecked(checked, false);\n    }\n    /**\n     * Returns value `true` if state is selected for the checkbox.\n     */\n    get checked() {\n        return this._checked;\n    }\n    /**\n     * Toggle the selected state of the checkbox.\n     */\n    toggle() {\n        // Flip checked and reset indeterminate\n        this.setChecked(!this.checked, true);\n    }\n    /**\n     * Writes a value from `ngModel` to the component.\n     *\n     * In this case the value is the `checked` property.\n     *\n     * @param value boolean, corresponds to the `checked` property.\n     */\n    writeValue(value) {\n        // Set checked and reset indeterminate\n        this.setChecked(!!value, true);\n    }\n    /**\n     * Sets a method in order to propagate changes back to the form.\n     */\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * @param fn Callback to be triggered when the checkbox is touched.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * `ControlValueAccessor` method to programmatically disable the checkbox.\n     *\n     * ex: `this.formGroup.get(\"myCheckbox\").disable();`\n     *\n     * @param isDisabled `true` to disable the checkbox\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.inputCheckbox.nativeElement.disabled = this.disabled;\n    }\n    focusOut() {\n        this.onTouched();\n    }\n    /**\n     * Executes on the event of a change within `Checkbox` to block propagation.\n     */\n    onChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     * Handles click events on the `Checkbox` and emits changes to other classes.\n     */\n    onClick(event) {\n        if (this.click.observers.length) {\n            // Disable default checkbox activation behavior which flips checked and resets indeterminate.\n            // This allows the parent component to control the checked/indeterminate properties.\n            event.preventDefault();\n            this.click.emit();\n            return;\n        }\n        if (!this.disabled) {\n            this.toggle();\n            this.transitionCheckboxState(this._checked ? CheckboxState.Checked : CheckboxState.Unchecked);\n            this.emitChangeEvent();\n        }\n    }\n    /**\n     * Handles changes between checkbox states.\n     */\n    transitionCheckboxState(newState) {\n        this.currentCheckboxState = newState;\n    }\n    /**\n     * Creates instance of `CheckboxChange` used to propagate the change event.\n     */\n    emitChangeEvent() {\n        /* begin deprecation */\n        let event = new CheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this.change.emit(event);\n        /* end deprecation */\n        this.checkedChange.emit(this.checked);\n        this.propagateChange(this.checked);\n    }\n    /**\n     * Updates the checkbox if it is in the indeterminate state.\n     */\n    ngAfterViewInit() {\n        if (this.indeterminate && this.inputCheckbox && this.inputCheckbox.nativeElement) {\n            this.inputCheckbox.nativeElement.indeterminate = true;\n        }\n    }\n    /**\n     * Sets checked state and optionally resets indeterminate state.\n     */\n    setChecked(checked, resetIndeterminate) {\n        if (checked === this._checked) {\n            return;\n        }\n        this._checked = checked;\n        // Reset indeterminate if requested\n        if (resetIndeterminate && this._indeterminate) {\n            this._indeterminate = false;\n            Promise.resolve().then(() => {\n                this.indeterminateChange.emit(this._indeterminate);\n            });\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n}\nCheckbox.ɵfac = function Checkbox_Factory(t) { return new (t || Checkbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: Checkbox, selectors: [[\"ibm-checkbox\"]], viewQuery: function Checkbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputCheckbox = _t.first);\n    } }, hostBindings: function Checkbox_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusout\", function Checkbox_focusout_HostBindingHandler() { return ctx.focusOut(); });\n    } }, inputs: { size: \"size\", inline: \"inline\", disabled: \"disabled\", skeleton: \"skeleton\", hideLabel: \"hideLabel\", id: \"id\", _ariaLabel: [\"ariaLabel\", \"_ariaLabel\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], _ariaLabelledby: [\"ariaLabelledby\", \"_ariaLabelledby\"], indeterminate: \"indeterminate\", checked: \"checked\", nested: \"nested\", name: \"name\", required: \"required\", value: \"value\" }, outputs: { click: \"click\", change: \"change\", checkedChange: \"checkedChange\", indeterminateChange: \"indeterminateChange\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: Checkbox,\n                multi: true\n            }\n        ])], ngContentSelectors: _c3, decls: 6, vars: 15, consts: [[1, \"bx--form-item\", \"bx--checkbox-wrapper\"], [\"type\", \"checkbox\", 1, \"bx--checkbox\", 3, \"id\", \"value\", \"name\", \"required\", \"checked\", \"disabled\", \"change\", \"click\"], [\"inputCheckbox\", \"\"], [1, \"bx--checkbox-label\", 3, \"for\", \"ngClass\"], [1, \"bx--checkbox-label-text\", 3, \"ngClass\"]], template: function Checkbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"change\", function Checkbox_Template_input_change_1_listener($event) { return ctx.onChange($event); })(\"click\", function Checkbox_Template_input_click_1_listener($event) { return ctx.onClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"label\", 3)(4, \"span\", 4);\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd()()();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id + \"_input\")(\"value\", ctx.value)(\"name\", ctx.name)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"for\", ctx.id + \"_input\")(\"ngClass\", ɵngcc0.ɵɵpureFunction1(11, _c1, ctx.skeleton));\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(13, _c2, ctx.hideLabel));\n    } }, dependencies: [ɵngcc1.NgClass], encapsulation: 2, changeDetection: 0 });\n/**\n * Variable used for creating unique ids for checkbox components.\n */\nCheckbox.checkboxCount = 0;\n/** @nocollapse */\nCheckbox.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nCheckbox.propDecorators = {\n    size: [{ type: Input }],\n    nested: [{ type: Input }],\n    inline: [{ type: Input }],\n    disabled: [{ type: Input }],\n    skeleton: [{ type: Input }],\n    hideLabel: [{ type: Input }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: [\"aria-label\",] }],\n    _ariaLabel: [{ type: Input, args: [\"ariaLabel\",] }],\n    ariaLabelledby: [{ type: Input, args: [\"aria-labelledby\",] }],\n    _ariaLabelledby: [{ type: Input, args: [\"ariaLabelledby\",] }],\n    indeterminate: [{ type: Input }],\n    checked: [{ type: Input }],\n    click: [{ type: Output }],\n    change: [{ type: Output }],\n    checkedChange: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    inputCheckbox: [{ type: ViewChild, args: [\"inputCheckbox\", { static: false },] }],\n    focusOut: [{ type: HostListener, args: [\"focusout\",] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Checkbox, [{\n        type: Component,\n        args: [{\n                selector: \"ibm-checkbox\",\n                template: `\n\t\t<div class=\"bx--form-item bx--checkbox-wrapper\">\n\t\t\t<input\n\t\t\t\t#inputCheckbox\n\t\t\t\tclass=\"bx--checkbox\"\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\t[id]=\"id + '_input'\"\n\t\t\t\t[value]=\"value\"\n\t\t\t\t[name]=\"name\"\n\t\t\t\t[required]=\"required\"\n\t\t\t\t[checked]=\"checked\"\n\t\t\t\t[disabled]=\"disabled\"\n\t\t\t\t[attr.aria-labelledby]=\"ariaLabelledby\"\n\t\t\t\t(change)=\"onChange($event)\"\n\t\t\t\t(click)=\"onClick($event)\">\n\t\t\t<label\n\t\t\t\t[for]=\"id + '_input'\"\n\t\t\t\t[attr.aria-label]=\"ariaLabel\"\n\t\t\t\tclass=\"bx--checkbox-label\"\n\t\t\t\t[ngClass]=\"{\n\t\t\t\t\t'bx--skeleton' : skeleton\n\t\t\t\t}\">\n\t\t\t\t<span [ngClass]=\"{'bx--visually-hidden' : hideLabel}\" class=\"bx--checkbox-label-text\">\n\t\t\t\t\t<ng-content></ng-content>\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t</div>\n\t`,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: Checkbox,\n                        multi: true\n                    }\n                ],\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { size: [{\n            type: Input\n        }], inline: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], skeleton: [{\n            type: Input\n        }], hideLabel: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], _ariaLabel: [{\n            type: Input,\n            args: [\"ariaLabel\"]\n        }], click: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], checkedChange: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], ariaLabel: [{\n            type: Input,\n            args: [\"aria-label\"]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: [\"aria-labelledby\"]\n        }], _ariaLabelledby: [{\n            type: Input,\n            args: [\"ariaLabelledby\"]\n        }], indeterminate: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], focusOut: [{\n            type: HostListener,\n            args: [\"focusout\"]\n        }], nested: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], inputCheckbox: [{\n            type: ViewChild,\n            args: [\"inputCheckbox\", { static: false }]\n        }] }); })();\n\n// modules\nclass CheckboxModule {\n}\nCheckboxModule.ɵfac = function CheckboxModule_Factory(t) { return new (t || CheckboxModule)(); };\nCheckboxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CheckboxModule });\nCheckboxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule,\n        FormsModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckboxModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    Checkbox\n                ],\n                exports: [\n                    Checkbox\n                ],\n                imports: [\n                    CommonModule,\n                    FormsModule\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CheckboxModule, { declarations: function () { return [Checkbox]; }, imports: function () { return [CommonModule,\n        FormsModule]; }, exports: function () { return [Checkbox]; } }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Checkbox, CheckboxState, CheckboxChange, CheckboxModule };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,uBAAT,EAAkCC,iBAAlC,EAAqDC,SAArD,EAAgEC,YAAhE,EAA8EC,KAA9E,EAAqFC,MAArF,EAA6FC,SAA7F,EAAwGC,YAAxG,EAAsHC,QAAtH,QAAsI,eAAtI;AACA,SAASC,iBAAT,EAA4BC,WAA5B,QAA+C,gBAA/C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA;AACA;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,iBAAxB;AAEA,MAAMC,GAAG,GAAG,CAAC,eAAD,CAAZ;;AACA,MAAMC,GAAG,GAAG,UAAUC,EAAV,EAAc;EAAE,OAAO;IAAE,gBAAgBA;EAAlB,CAAP;AAAgC,CAA5D;;AACA,MAAMC,GAAG,GAAG,UAAUD,EAAV,EAAc;EAAE,OAAO;IAAE,uBAAuBA;EAAzB,CAAP;AAAuC,CAAnE;;AACA,MAAME,GAAG,GAAG,CAAC,GAAD,CAAZ;AACA,IAAIC,aAAJ;;AACA,CAAC,UAAUA,aAAV,EAAyB;EACtBA,aAAa,CAACA,aAAa,CAAC,MAAD,CAAb,GAAwB,CAAzB,CAAb,GAA2C,MAA3C;EACAA,aAAa,CAACA,aAAa,CAAC,eAAD,CAAb,GAAiC,CAAlC,CAAb,GAAoD,eAApD;EACAA,aAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,CAA5B,CAAb,GAA8C,SAA9C;EACAA,aAAa,CAACA,aAAa,CAAC,WAAD,CAAb,GAA6B,CAA9B,CAAb,GAAgD,WAAhD;AACH,CALD,EAKGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CALhB;AAMA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,cAAN,CAAqB;AAErB;AACA;AACA;AACA;AACA;;;AACA,MAAMC,QAAN,CAAe;EACX;AACJ;AACA;EACIC,WAAW,CAACC,iBAAD,EAAoB;IAC3B,KAAKA,iBAAL,GAAyBA,iBAAzB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,IAAL,GAAY,IAAZ;IACA;AACR;AACA;;IACQ,KAAKC,MAAL,GAAc,KAAd;IACA;AACR;AACA;;IACQ,KAAKC,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;;IACQ,KAAKC,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;;IACQ,KAAKC,SAAL,GAAiB,KAAjB;IACA;AACR;AACA;;IACQ,KAAKC,EAAL,GAAW,YAAWR,QAAQ,CAACS,aAAc,EAA7C,CA3B2B,CA4B3B;IACA;;IACA,KAAKC,UAAL,GAAkB,EAAlB;IACA;AACR;AACA;;IACQ,KAAKC,KAAL,GAAa,IAAI7B,YAAJ,EAAb;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,KAAK8B,MAAL,GAAc,IAAI9B,YAAJ,EAAd;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAK+B,aAAL,GAAqB,IAAI/B,YAAJ,EAArB;IACA;AACR;AACA;AACA;;IACQ,KAAKgC,mBAAL,GAA2B,IAAIhC,YAAJ,EAA3B;IACA;AACR;AACA;;IACQ,KAAKiC,QAAL,GAAgB,KAAhB;IACA;AACR;AACA;;IACQ,KAAKC,cAAL,GAAsB,KAAtB;IACA;AACR;AACA;;IACQ,KAAKC,oBAAL,GAA4BnB,aAAa,CAACoB,IAA1C;IACA;AACR;AACA;;IACQ,KAAKC,SAAL,GAAiB,MAAM,CAAG,CAA1B;IACA;AACR;AACA;;;IACQ,KAAKC,eAAL,GAAwBC,CAAD,IAAO,CAAG,CAAjC;;IACArB,QAAQ,CAACS,aAAT;EACH;EACD;AACJ;AACA;AACA;AACA;EACI;;;EACa,IAATa,SAAS,CAACC,KAAD,EAAQ;IACjB,KAAKb,UAAL,GAAkBa,KAAlB;EACH;;EACY,IAATD,SAAS,GAAG;IACZ,OAAO,KAAKZ,UAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;EACI;;;EACkB,IAAdc,cAAc,CAACD,KAAD,EAAQ;IACtB,KAAKE,eAAL,GAAuBF,KAAvB;EACH;;EACiB,IAAdC,cAAc,GAAG;IACjB,OAAO,KAAKC,eAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACqB,IAAbC,aAAa,CAACA,aAAD,EAAgB;IAC7B,IAAIA,aAAa,KAAK,KAAKV,cAA3B,EAA2C;MACvC;IACH;;IACD,KAAKA,cAAL,GAAsBU,aAAtB;;IACA,IAAI,KAAKV,cAAT,EAAyB;MACrB,KAAKW,uBAAL,CAA6B7B,aAAa,CAAC8B,aAA3C;IACH,CAFD,MAGK;MACD,KAAKD,uBAAL,CAA6B,KAAKE,OAAL,GAAe/B,aAAa,CAACgC,OAA7B,GAAuChC,aAAa,CAACiC,SAAlF;IACH;;IACD,IAAI,KAAKC,aAAL,IAAsB,KAAKA,aAAL,CAAmBC,aAA7C,EAA4D;MACxD,KAAKD,aAAL,CAAmBC,aAAnB,CAAiCP,aAAjC,GAAiDA,aAAjD;IACH;;IACD,KAAKxB,iBAAL,CAAuBgC,YAAvB;IACA,KAAKpB,mBAAL,CAAyBqB,IAAzB,CAA8B,KAAKnB,cAAnC;EACH;EACD;AACJ;AACA;;;EACqB,IAAbU,aAAa,GAAG;IAChB,OAAO,KAAKV,cAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACe,IAAPa,OAAO,CAACA,OAAD,EAAU;IACjB,KAAKO,UAAL,CAAgBP,OAAhB,EAAyB,KAAzB;EACH;EACD;AACJ;AACA;;;EACe,IAAPA,OAAO,GAAG;IACV,OAAO,KAAKd,QAAZ;EACH;EACD;AACJ;AACA;;;EACIsB,MAAM,GAAG;IACL;IACA,KAAKD,UAAL,CAAgB,CAAC,KAAKP,OAAtB,EAA+B,IAA/B;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIS,UAAU,CAACf,KAAD,EAAQ;IACd;IACA,KAAKa,UAAL,CAAgB,CAAC,CAACb,KAAlB,EAAyB,IAAzB;EACH;EACD;AACJ;AACA;;;EACIgB,gBAAgB,CAACC,EAAD,EAAK;IACjB,KAAKpB,eAAL,GAAuBoB,EAAvB;EACH;EACD;AACJ;AACA;AACA;;;EACIC,iBAAiB,CAACD,EAAD,EAAK;IAClB,KAAKrB,SAAL,GAAiBqB,EAAjB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIE,gBAAgB,CAACC,UAAD,EAAa;IACzB,KAAKtC,QAAL,GAAgBsC,UAAhB;IACA,KAAKX,aAAL,CAAmBC,aAAnB,CAAiC5B,QAAjC,GAA4C,KAAKA,QAAjD;EACH;;EACDuC,QAAQ,GAAG;IACP,KAAKzB,SAAL;EACH;EACD;AACJ;AACA;;;EACI0B,QAAQ,CAACC,KAAD,EAAQ;IACZA,KAAK,CAACC,eAAN;EACH;EACD;AACJ;AACA;;;EACIC,OAAO,CAACF,KAAD,EAAQ;IACX,IAAI,KAAKnC,KAAL,CAAWsC,SAAX,CAAqBC,MAAzB,EAAiC;MAC7B;MACA;MACAJ,KAAK,CAACK,cAAN;MACA,KAAKxC,KAAL,CAAWwB,IAAX;MACA;IACH;;IACD,IAAI,CAAC,KAAK9B,QAAV,EAAoB;MAChB,KAAKgC,MAAL;MACA,KAAKV,uBAAL,CAA6B,KAAKZ,QAAL,GAAgBjB,aAAa,CAACgC,OAA9B,GAAwChC,aAAa,CAACiC,SAAnF;MACA,KAAKqB,eAAL;IACH;EACJ;EACD;AACJ;AACA;;;EACIzB,uBAAuB,CAAC0B,QAAD,EAAW;IAC9B,KAAKpC,oBAAL,GAA4BoC,QAA5B;EACH;EACD;AACJ;AACA;;;EACID,eAAe,GAAG;IACd;IACA,IAAIN,KAAK,GAAG,IAAI/C,cAAJ,EAAZ;IACA+C,KAAK,CAACQ,MAAN,GAAe,IAAf;IACAR,KAAK,CAACjB,OAAN,GAAgB,KAAKA,OAArB;IACA,KAAKjB,MAAL,CAAYuB,IAAZ,CAAiBW,KAAjB;IACA;;IACA,KAAKjC,aAAL,CAAmBsB,IAAnB,CAAwB,KAAKN,OAA7B;IACA,KAAKT,eAAL,CAAqB,KAAKS,OAA1B;EACH;EACD;AACJ;AACA;;;EACI0B,eAAe,GAAG;IACd,IAAI,KAAK7B,aAAL,IAAsB,KAAKM,aAA3B,IAA4C,KAAKA,aAAL,CAAmBC,aAAnE,EAAkF;MAC9E,KAAKD,aAAL,CAAmBC,aAAnB,CAAiCP,aAAjC,GAAiD,IAAjD;IACH;EACJ;EACD;AACJ;AACA;;;EACIU,UAAU,CAACP,OAAD,EAAU2B,kBAAV,EAA8B;IACpC,IAAI3B,OAAO,KAAK,KAAKd,QAArB,EAA+B;MAC3B;IACH;;IACD,KAAKA,QAAL,GAAgBc,OAAhB,CAJoC,CAKpC;;IACA,IAAI2B,kBAAkB,IAAI,KAAKxC,cAA/B,EAA+C;MAC3C,KAAKA,cAAL,GAAsB,KAAtB;MACAyC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;QACzB,KAAK7C,mBAAL,CAAyBqB,IAAzB,CAA8B,KAAKnB,cAAnC;MACH,CAFD;IAGH;;IACD,KAAKd,iBAAL,CAAuBgC,YAAvB;EACH;;AAhQU;;AAkQflC,QAAQ,CAAC4D,IAAT,GAAgB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;EAAE,OAAO,KAAKA,CAAC,IAAI9D,QAAV,EAAoBT,MAAM,CAACwE,iBAAP,CAAyBxE,MAAM,CAACX,iBAAhC,CAApB,CAAP;AAAiF,CAAhI;;AACAoB,QAAQ,CAACgE,IAAT,GAAgB,aAAczE,MAAM,CAAC0E,iBAAP,CAAyB;EAAEC,IAAI,EAAElE,QAAR;EAAkBmE,SAAS,EAAE,CAAC,CAAC,cAAD,CAAD,CAA7B;EAAiDC,SAAS,EAAE,SAASC,cAAT,CAAwBC,EAAxB,EAA4BC,GAA5B,EAAiC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MAC1J/E,MAAM,CAACiF,WAAP,CAAmB/E,GAAnB,EAAwB,CAAxB;IACH;;IAAC,IAAI6E,EAAE,GAAG,CAAT,EAAY;MACV,IAAIG,EAAJ;;MACAlF,MAAM,CAACmF,cAAP,CAAsBD,EAAE,GAAGlF,MAAM,CAACoF,WAAP,EAA3B,MAAqDJ,GAAG,CAACvC,aAAJ,GAAoByC,EAAE,CAACG,KAA5E;IACH;EAAE,CALgD;EAK9CC,YAAY,EAAE,SAASC,qBAAT,CAA+BR,EAA/B,EAAmCC,GAAnC,EAAwC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACrE/E,MAAM,CAACwF,UAAP,CAAkB,UAAlB,EAA8B,SAASC,oCAAT,GAAgD;QAAE,OAAOT,GAAG,CAAC3B,QAAJ,EAAP;MAAwB,CAAxG;IACH;EAAE,CAPgD;EAO9CqC,MAAM,EAAE;IAAE9E,IAAI,EAAE,MAAR;IAAgBC,MAAM,EAAE,QAAxB;IAAkCC,QAAQ,EAAE,UAA5C;IAAwDC,QAAQ,EAAE,UAAlE;IAA8EC,SAAS,EAAE,WAAzF;IAAsGC,EAAE,EAAE,IAA1G;IAAgHE,UAAU,EAAE,CAAC,WAAD,EAAc,YAAd,CAA5H;IAAyJY,SAAS,EAAE,CAAC,YAAD,EAAe,WAAf,CAApK;IAAiME,cAAc,EAAE,CAAC,iBAAD,EAAoB,gBAApB,CAAjN;IAAwPC,eAAe,EAAE,CAAC,gBAAD,EAAmB,iBAAnB,CAAzQ;IAAgTC,aAAa,EAAE,eAA/T;IAAgVG,OAAO,EAAE,SAAzV;IAAoWqD,MAAM,EAAE,QAA5W;IAAsXC,IAAI,EAAE,MAA5X;IAAoYC,QAAQ,EAAE,UAA9Y;IAA0Z7D,KAAK,EAAE;EAAja,CAPsC;EAOsY8D,OAAO,EAAE;IAAE1E,KAAK,EAAE,OAAT;IAAkBC,MAAM,EAAE,QAA1B;IAAoCC,aAAa,EAAE,eAAnD;IAAoEC,mBAAmB,EAAE;EAAzF,CAP/Y;EAOigBwE,QAAQ,EAAE,CAAC/F,MAAM,CAACgG,kBAAP,CAA0B,CACjlB;IACIC,OAAO,EAAEpG,iBADb;IAEIqG,WAAW,EAAEzF,QAFjB;IAGI0F,KAAK,EAAE;EAHX,CADilB,CAA1B,CAAD,CAP3gB;EAa1CC,kBAAkB,EAAE9F,GAbsB;EAajB+F,KAAK,EAAE,CAbU;EAaPC,IAAI,EAAE,EAbC;EAaGC,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,eAAJ,EAAqB,sBAArB,CAAD,EAA+C,CAAC,MAAD,EAAS,UAAT,EAAqB,CAArB,EAAwB,cAAxB,EAAwC,CAAxC,EAA2C,IAA3C,EAAiD,OAAjD,EAA0D,MAA1D,EAAkE,UAAlE,EAA8E,SAA9E,EAAyF,UAAzF,EAAqG,QAArG,EAA+G,OAA/G,CAA/C,EAAwK,CAAC,eAAD,EAAkB,EAAlB,CAAxK,EAA+L,CAAC,CAAD,EAAI,oBAAJ,EAA0B,CAA1B,EAA6B,KAA7B,EAAoC,SAApC,CAA/L,EAA+O,CAAC,CAAD,EAAI,yBAAJ,EAA+B,CAA/B,EAAkC,SAAlC,CAA/O,CAbX;EAaySC,QAAQ,EAAE,SAASC,iBAAT,CAA2B1B,EAA3B,EAA+BC,GAA/B,EAAoC;IAAE,IAAID,EAAE,GAAG,CAAT,EAAY;MACpZ/E,MAAM,CAAC0G,eAAP;MACA1G,MAAM,CAAC2G,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,OAAtC,EAA+C,CAA/C,EAAkD,CAAlD;MACA3G,MAAM,CAACwF,UAAP,CAAkB,QAAlB,EAA4B,SAASoB,yCAAT,CAAmDC,MAAnD,EAA2D;QAAE,OAAO7B,GAAG,CAAC1B,QAAJ,CAAauD,MAAb,CAAP;MAA8B,CAAvH,EAAyH,OAAzH,EAAkI,SAASC,wCAAT,CAAkDD,MAAlD,EAA0D;QAAE,OAAO7B,GAAG,CAACvB,OAAJ,CAAYoD,MAAZ,CAAP;MAA6B,CAA3N;MACA7G,MAAM,CAAC+G,YAAP;MACA/G,MAAM,CAAC2G,cAAP,CAAsB,CAAtB,EAAyB,OAAzB,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,MAAxC,EAAgD,CAAhD;MACA3G,MAAM,CAACgH,YAAP,CAAoB,CAApB;MACAhH,MAAM,CAAC+G,YAAP;IACH;;IAAC,IAAIhC,EAAE,GAAG,CAAT,EAAY;MACV/E,MAAM,CAACiH,SAAP,CAAiB,CAAjB;MACAjH,MAAM,CAACkH,UAAP,CAAkB,IAAlB,EAAwBlC,GAAG,CAAC/D,EAAJ,GAAS,QAAjC,EAA2C,OAA3C,EAAoD+D,GAAG,CAAChD,KAAxD,EAA+D,MAA/D,EAAuEgD,GAAG,CAACY,IAA3E,EAAiF,UAAjF,EAA6FZ,GAAG,CAACa,QAAjG,EAA2G,SAA3G,EAAsHb,GAAG,CAAC1C,OAA1H,EAAmI,UAAnI,EAA+I0C,GAAG,CAAClE,QAAnJ;MACAd,MAAM,CAACmH,WAAP,CAAmB,iBAAnB,EAAsCnC,GAAG,CAAC/C,cAA1C;MACAjC,MAAM,CAACiH,SAAP,CAAiB,CAAjB;MACAjH,MAAM,CAACkH,UAAP,CAAkB,KAAlB,EAAyBlC,GAAG,CAAC/D,EAAJ,GAAS,QAAlC,EAA4C,SAA5C,EAAuDjB,MAAM,CAACoH,eAAP,CAAuB,EAAvB,EAA2BjH,GAA3B,EAAgC6E,GAAG,CAACjE,QAApC,CAAvD;MACAf,MAAM,CAACmH,WAAP,CAAmB,YAAnB,EAAiCnC,GAAG,CAACjD,SAArC;MACA/B,MAAM,CAACiH,SAAP,CAAiB,CAAjB;MACAjH,MAAM,CAACkH,UAAP,CAAkB,SAAlB,EAA6BlH,MAAM,CAACoH,eAAP,CAAuB,EAAvB,EAA2B/G,GAA3B,EAAgC2E,GAAG,CAAChE,SAApC,CAA7B;IACH;EAAE,CA9BgD;EA8B9CqG,YAAY,EAAE,CAACpH,MAAM,CAACqH,OAAR,CA9BgC;EA8BdC,aAAa,EAAE,CA9BD;EA8BIC,eAAe,EAAE;AA9BrB,CAAzB,CAA9B;AA+BA;AACA;AACA;;AACA/G,QAAQ,CAACS,aAAT,GAAyB,CAAzB;AACA;;AACAT,QAAQ,CAACgH,cAAT,GAA0B,MAAM,CAC5B;EAAE9C,IAAI,EAAEtF;AAAR,CAD4B,CAAhC;;AAGAoB,QAAQ,CAACiH,cAAT,GAA0B;EACtB9G,IAAI,EAAE,CAAC;IAAE+D,IAAI,EAAEnF;EAAR,CAAD,CADgB;EAEtBmG,MAAM,EAAE,CAAC;IAAEhB,IAAI,EAAEnF;EAAR,CAAD,CAFc;EAGtBqB,MAAM,EAAE,CAAC;IAAE8D,IAAI,EAAEnF;EAAR,CAAD,CAHc;EAItBsB,QAAQ,EAAE,CAAC;IAAE6D,IAAI,EAAEnF;EAAR,CAAD,CAJY;EAKtBuB,QAAQ,EAAE,CAAC;IAAE4D,IAAI,EAAEnF;EAAR,CAAD,CALY;EAMtBwB,SAAS,EAAE,CAAC;IAAE2D,IAAI,EAAEnF;EAAR,CAAD,CANW;EAOtBoG,IAAI,EAAE,CAAC;IAAEjB,IAAI,EAAEnF;EAAR,CAAD,CAPgB;EAQtByB,EAAE,EAAE,CAAC;IAAE0D,IAAI,EAAEnF;EAAR,CAAD,CARkB;EAStBqG,QAAQ,EAAE,CAAC;IAAElB,IAAI,EAAEnF;EAAR,CAAD,CATY;EAUtBwC,KAAK,EAAE,CAAC;IAAE2C,IAAI,EAAEnF;EAAR,CAAD,CAVe;EAWtBuC,SAAS,EAAE,CAAC;IAAE4C,IAAI,EAAEnF,KAAR;IAAemI,IAAI,EAAE,CAAC,YAAD;EAArB,CAAD,CAXW;EAYtBxG,UAAU,EAAE,CAAC;IAAEwD,IAAI,EAAEnF,KAAR;IAAemI,IAAI,EAAE,CAAC,WAAD;EAArB,CAAD,CAZU;EAatB1F,cAAc,EAAE,CAAC;IAAE0C,IAAI,EAAEnF,KAAR;IAAemI,IAAI,EAAE,CAAC,iBAAD;EAArB,CAAD,CAbM;EActBzF,eAAe,EAAE,CAAC;IAAEyC,IAAI,EAAEnF,KAAR;IAAemI,IAAI,EAAE,CAAC,gBAAD;EAArB,CAAD,CAdK;EAetBxF,aAAa,EAAE,CAAC;IAAEwC,IAAI,EAAEnF;EAAR,CAAD,CAfO;EAgBtB8C,OAAO,EAAE,CAAC;IAAEqC,IAAI,EAAEnF;EAAR,CAAD,CAhBa;EAiBtB4B,KAAK,EAAE,CAAC;IAAEuD,IAAI,EAAElF;EAAR,CAAD,CAjBe;EAkBtB4B,MAAM,EAAE,CAAC;IAAEsD,IAAI,EAAElF;EAAR,CAAD,CAlBc;EAmBtB6B,aAAa,EAAE,CAAC;IAAEqD,IAAI,EAAElF;EAAR,CAAD,CAnBO;EAoBtB8B,mBAAmB,EAAE,CAAC;IAAEoD,IAAI,EAAElF;EAAR,CAAD,CApBC;EAqBtBgD,aAAa,EAAE,CAAC;IAAEkC,IAAI,EAAEjF,SAAR;IAAmBiI,IAAI,EAAE,CAAC,eAAD,EAAkB;MAAEC,MAAM,EAAE;IAAV,CAAlB;EAAzB,CAAD,CArBO;EAsBtBvE,QAAQ,EAAE,CAAC;IAAEsB,IAAI,EAAEhF,YAAR;IAAsBgI,IAAI,EAAE,CAAC,UAAD;EAA5B,CAAD;AAtBY,CAA1B;;AAwBA,CAAC,YAAY;EAAE,CAAC,OAAOE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7H,MAAM,CAAC8H,iBAAP,CAAyBrH,QAAzB,EAAmC,CAAC;IAC9FkE,IAAI,EAAErF,SADwF;IAE9FqI,IAAI,EAAE,CAAC;MACCI,QAAQ,EAAE,cADX;MAECvB,QAAQ,EAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA7Be;MA8BCwB,SAAS,EAAE,CACP;QACI/B,OAAO,EAAEpG,iBADb;QAEIqG,WAAW,EAAEzF,QAFjB;QAGI0F,KAAK,EAAE;MAHX,CADO,CA9BZ;MAqCCqB,eAAe,EAAEpI,uBAAuB,CAAC6I;IArC1C,CAAD;EAFwF,CAAD,CAAnC,EAyC1D,YAAY;IAAE,OAAO,CAAC;MAAEtD,IAAI,EAAE3E,MAAM,CAACX;IAAf,CAAD,CAAP;EAA8C,CAzCF,EAyCI;IAAEuB,IAAI,EAAE,CAAC;MACnE+D,IAAI,EAAEnF;IAD6D,CAAD,CAAR;IAE1DqB,MAAM,EAAE,CAAC;MACT8D,IAAI,EAAEnF;IADG,CAAD,CAFkD;IAI1DsB,QAAQ,EAAE,CAAC;MACX6D,IAAI,EAAEnF;IADK,CAAD,CAJgD;IAM1DuB,QAAQ,EAAE,CAAC;MACX4D,IAAI,EAAEnF;IADK,CAAD,CANgD;IAQ1DwB,SAAS,EAAE,CAAC;MACZ2D,IAAI,EAAEnF;IADM,CAAD,CAR+C;IAU1DyB,EAAE,EAAE,CAAC;MACL0D,IAAI,EAAEnF;IADD,CAAD,CAVsD;IAY1D2B,UAAU,EAAE,CAAC;MACbwD,IAAI,EAAEnF,KADO;MAEbmI,IAAI,EAAE,CAAC,WAAD;IAFO,CAAD,CAZ8C;IAe1DvG,KAAK,EAAE,CAAC;MACRuD,IAAI,EAAElF;IADE,CAAD,CAfmD;IAiB1D4B,MAAM,EAAE,CAAC;MACTsD,IAAI,EAAElF;IADG,CAAD,CAjBkD;IAmB1D6B,aAAa,EAAE,CAAC;MAChBqD,IAAI,EAAElF;IADU,CAAD,CAnB2C;IAqB1D8B,mBAAmB,EAAE,CAAC;MACtBoD,IAAI,EAAElF;IADgB,CAAD,CArBqC;IAuB1DsC,SAAS,EAAE,CAAC;MACZ4C,IAAI,EAAEnF,KADM;MAEZmI,IAAI,EAAE,CAAC,YAAD;IAFM,CAAD,CAvB+C;IA0B1D1F,cAAc,EAAE,CAAC;MACjB0C,IAAI,EAAEnF,KADW;MAEjBmI,IAAI,EAAE,CAAC,iBAAD;IAFW,CAAD,CA1B0C;IA6B1DzF,eAAe,EAAE,CAAC;MAClByC,IAAI,EAAEnF,KADY;MAElBmI,IAAI,EAAE,CAAC,gBAAD;IAFY,CAAD,CA7ByC;IAgC1DxF,aAAa,EAAE,CAAC;MAChBwC,IAAI,EAAEnF;IADU,CAAD,CAhC2C;IAkC1D8C,OAAO,EAAE,CAAC;MACVqC,IAAI,EAAEnF;IADI,CAAD,CAlCiD;IAoC1D6D,QAAQ,EAAE,CAAC;MACXsB,IAAI,EAAEhF,YADK;MAEXgI,IAAI,EAAE,CAAC,UAAD;IAFK,CAAD,CApCgD;IAuC1DhC,MAAM,EAAE,CAAC;MACThB,IAAI,EAAEnF;IADG,CAAD,CAvCkD;IAyC1DoG,IAAI,EAAE,CAAC;MACPjB,IAAI,EAAEnF;IADC,CAAD,CAzCoD;IA2C1DqG,QAAQ,EAAE,CAAC;MACXlB,IAAI,EAAEnF;IADK,CAAD,CA3CgD;IA6C1DwC,KAAK,EAAE,CAAC;MACR2C,IAAI,EAAEnF;IADE,CAAD,CA7CmD;IA+C1DiD,aAAa,EAAE,CAAC;MAChBkC,IAAI,EAAEjF,SADU;MAEhBiI,IAAI,EAAE,CAAC,eAAD,EAAkB;QAAEC,MAAM,EAAE;MAAV,CAAlB;IAFU,CAAD;EA/C2C,CAzCJ,CAAnD;AA2FC,CA3FhB,I,CA6FA;;;AACA,MAAMM,cAAN,CAAqB;;AAErBA,cAAc,CAAC7D,IAAf,GAAsB,SAAS8D,sBAAT,CAAgC5D,CAAhC,EAAmC;EAAE,OAAO,KAAKA,CAAC,IAAI2D,cAAV,GAAP;AAAqC,CAAhG;;AACAA,cAAc,CAACE,IAAf,GAAsB,aAAcpI,MAAM,CAACqI,gBAAP,CAAwB;EAAE1D,IAAI,EAAEuD;AAAR,CAAxB,CAApC;AACAA,cAAc,CAACI,IAAf,GAAsB,aAActI,MAAM,CAACuI,gBAAP,CAAwB;EAAEC,OAAO,EAAE,CAACzI,YAAD,EAC/DD,WAD+D;AAAX,CAAxB,CAApC;;AAEA,CAAC,YAAY;EAAE,CAAC,OAAO+H,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD7H,MAAM,CAAC8H,iBAAP,CAAyBI,cAAzB,EAAyC,CAAC;IACpGvD,IAAI,EAAE/E,QAD8F;IAEpG+H,IAAI,EAAE,CAAC;MACCc,YAAY,EAAE,CACVhI,QADU,CADf;MAICiI,OAAO,EAAE,CACLjI,QADK,CAJV;MAOC+H,OAAO,EAAE,CACLzI,YADK,EAELD,WAFK;IAPV,CAAD;EAF8F,CAAD,CAAzC,EAc1D,IAd0D,EAcpD,IAdoD,CAAnD;AAcO,CAdtB;;AAeA,CAAC,YAAY;EAAE,CAAC,OAAO6I,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD3I,MAAM,CAAC4I,kBAAP,CAA0BV,cAA1B,EAA0C;IAAEO,YAAY,EAAE,YAAY;MAAE,OAAO,CAAChI,QAAD,CAAP;IAAoB,CAAlD;IAAoD+H,OAAO,EAAE,YAAY;MAAE,OAAO,CAACzI,YAAD,EACtLD,WADsL,CAAP;IAChK,CADqF;IACnF4I,OAAO,EAAE,YAAY;MAAE,OAAO,CAACjI,QAAD,CAAP;IAAoB;EADwC,CAA1C,CAAnD;AAC2D,CAD1E;AAGA;AACA;AACA;;;AAEA,SAASA,QAAT,EAAmBF,aAAnB,EAAkCC,cAAlC,EAAkD0H,cAAlD"},"metadata":{},"sourceType":"module"}